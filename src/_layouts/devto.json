[{"type_of":"article","id":737101,"title":"The Frontend Hitchhiker's Guide: Testing","description":"Introduction   Tests give you the confidence to make changes to code whether its yours or...","published":true,"published_at":"2021-06-27T01:21:49.816Z","slug":"the-frontend-hitchhikers-guide-testing-311k","path":"/snickdx/the-frontend-hitchhikers-guide-testing-311k","url":"https://dev.to/snickdx/the-frontend-hitchhikers-guide-testing-311k","comments_count":0,"public_reactions_count":9,"page_views_count":151,"published_timestamp":"2021-06-27T01:21:49Z","body_markdown":"# Introduction\nTests give you the confidence to make changes to code whether its yours or someone else's. Tested code also brings peace of mind and is the calling card of a mature developer. \n\nThe following is an overview of some of the popular tooling for testing front end applications.\n\n![testing](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awfh13b7zrbwnyntjcx0.gif)\n \nTesting tools typically provide some combination of the following features:\n\n1. Test running \u0026 reporting\n2. Assertion Syntax for writing test code\n3. Browser Automation\n4. Page auditing \u0026 profiling\n\nThe following are common types of tests\n\n| Type of Testing | Definition                                                                                                                |\n|-----------------|---------------------------------------------------------------------------------------------------------------------------|\n| Unit            | Checking the functionality of individual components by comparing their inputs and output.                                 |\n| Integration     | Verifying the functionality of                                                                                            |\n| End to End      | Automating the browser to verify functionality from the UI, filling forms clicking buttons and checking network requests. |\n| Performance     | Auditing a web page's performance such as load times and core web vitals                                                 |\n| Accessibility   | Audit the accessibility of a page                                                                                     |\n\n# Testing Tools\n\n* Libraries\n  * [Jasmine](#jasmine)\n  * [Jest](#jest)\n  * [Chai](#chai)\n  * [Mocha](#mocha)\n  * [Testing Library](#testing-library)\n* Browser Automation\n  * [Puppeteer](#puppeteer)\n  * [Web Driver IO](#web-driver-io)\n  * [Selenium Web Driver](#selenium-web-driver)\n  * [Nightwatch](#nightwatch)\n  * [Cypress](#cypress)\n* Page Auditing\n  * [Lighthouse](#lighthouse)\n  * [Webpage Test](#web-page-test)\n  * [WAVE](#wave)\n\n## Frameworks/Libraries\n\n### [Jasmine](https://jasmine.github.io/)\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdtsnb1wsycyuwd2ovfi.png)\nJasmine is the default testing library of angular but it can be used with any frontend framework. Jasmine allows you to write unit tests using the [Behavior-Driven Development](https://en.wikipedia.org/wiki/Behavior-driven_development) (BDD) style.\n\n\n### [Jest](https://jestjs.io/)\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jyfdthxwuaelt8s3ljll.png)\nJest is another popular framework, jest boasts excellent exceptions that can provide more context when test cases fail. The Jest core team's goal is to make testing delightful.\n \n### [Chai](https://www.chaijs.com/)\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fg515v43eisa68ofs6yb.png) Chai is an assertion library, which means it can provide additionally testing syntax that you may want on top of your existing test library. Allow developers to write more specific and readable test cases.\n\n### [Mocha](https://mochajs.org/)\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoyyzc6hotk30k96ff09.png)\nMocha is a testing framework for writing tests but also lets your run the tests and view the report via the CLI. Mocha is often paired with Chai.\n\n### [Testing Library](https://testing-library.com/docs/react-testing-library/intro/)\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc2stcoyb9lx1siredza.png)\n\nTesting Library describes itself as a set of utilities that encourage good testing practices. It includes various libraries that allow you to write tests no matter what you use on the frontend such as the [angular](https://testing-library.com/docs/angular-testing-library/intro), [React](https://testing-library.com/docs/react-testing-library/intro) and [vue](https://testing-library.com/docs/vue-testing-library/intro). Some of which are recommended by the corresponding UI library itself such as [vue](https://reactjs.org/docs/testing.html) and [react](https://reactjs.org/docs/testing.html)\n\n## Browser Automation\n\n### [Puppeteer](https://developers.google.com/web/tools/puppeteer)\n\nPuppeteer is a fun nodejs package that lets you automate interactions on a browser's webpage. This is usually paired with a testing framework such as mocha to perform End-To-End testcase. For example with this combination you can test to verify if a form submits properly or if a table has a particular structure.\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qlswfnuhxc0th0rhmd0.png)\n\n### [Web Driver IO](https://webdriver.io/)\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa0krhhz9p3ysos8nd96.png)\n\nWeb driver IO is another automation tool with the advantage of being designed with UI Libraries such as React and Vue in mind. Web Driver IO's syntax lets you directly select react/vue components on the page. This allows you to write tests specific to the source code as opposed to the build output that puppeteer would require.\n\n### [Selenium Web Driver](https://www.selenium.dev/documentation/en/webdriver/)\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7iy9aw2zpgze8yeyyuif.png)\n\nSelenium Web Driver is another browser automation tool with more support for web browsers than puppeteer including Safari, Opera and even Internet Explorer.\n \n### [Nightwatch](https://nightwatchjs.org/)\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbu1w6basop3kbyakq3p.png)\n\nNightwatch is a fully integrated End-to-End testing tool that adheres to the [W3C](https://www.w3.org/TR/webdriver/) API. It also works with [Browser Stack](https://www.browserstack.com/) to perform cloud testing.\n\n### [Cypress](https://www.cypress.io/)\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj7p0hk1owrswaaz2l5n.png)\n\nCypress is another fully integrated End-to-End testing tool which lets you write, run and record tests in an interactive dashboard. Cypress has a really nice developer experience and much loved by its userbase.\n \n## Page Auditing\n\n### [Lighthouse](https://developers.google.com/web/tools/lighthouse)\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cghr8j4m7g9gmj776g8c.png) \n\nLighthouse audits performance according to the [core web vitals](https://web.dev/vitals/). Additionally, lighthouse can audit for Accessibility, Best Practices, Search Engine Optimization and whether your page is a Progressive Web App. You can also automate lighthouse audits via its [API](https://github.com/GoogleChrome/lighthouse-ci). Its a great tool to ensure your app is fast and does well with google search.\n\n### [Web Page Test](https://www.webpagetest.org/)\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ha3j71308j9wexv1mrs.png)\n\nWeb page test is a website that allows you to analyze a web page's performance. It records checks for compression, caching effective use CDN and load times among other things. You can create automated performance tests using its [API](https://github.com/marcelduran/webpagetest-api)\n\n### [WAVE](https://wave.webaim.org/)\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/astr39fel6buo716az3y.png)\nThe Web Accessibility Evaluation Tool with audit your page for accessibility issues. This includes improper use of html elements, bad tab navigation, improper use of [aria attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA), font sizes and colour contrasts. Accessibility (A11y) is unfortunately an afterthought sometimes for developers but paying just a little attention to it can go a long way for making a web for everyone.\n\n# Conclusion\n\nThis stop was a hefty one. As you can see there many tools available for testing (this is no way all of them) and this is just on the frontend side of things. We will be arriving at stop 6 next week and it promises to be very insightful. Can you guess what it might be?\n \n\n# Resources\n\n* [Front End Testing](https://www.testim.io/blog/front-end-testing-complete-overview/)\n* [A comprehensive Guide to Front End Testing](https://www.perfecto.io/blog/comprehensive-guide-front-end-testing)\n* [LinkWe Podcast: Testing](https://www.facebook.com/linkwepodcast/videos/1176353916126186)\n* [CSS Tricks: Frontend testing is for everyone](https://css-tricks.com/front-end-testing-is-for-everyone/)\n* [Frontend Masters: Testing](https://frontendmasters.com/books/front-end-handbook/2018/tools/testing.html)","positive_reactions_count":9,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--cxMW0RHi--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0jqsb072wchb48q71nj.png","tag_list":["testing","webdev","javascript","codenewbie"],"canonical_url":"https://dev.to/snickdx/the-frontend-hitchhikers-guide-testing-311k","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":729683,"title":"The Frontend Hitchhiker's Guide: Build Tools","description":"Build tools let's you transform your source code for production environments. Additionally, they can...","published":true,"published_at":"2021-06-19T23:56:03.815Z","slug":"the-frontend-hitchhiker-s-guide-build-tools-3bj2","path":"/snickdx/the-frontend-hitchhiker-s-guide-build-tools-3bj2","url":"https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-build-tools-3bj2","comments_count":0,"public_reactions_count":5,"page_views_count":221,"published_timestamp":"2021-06-19T23:56:03Z","body_markdown":"Build tools let's you transform your source code for production environments. Additionally, they can be utilized to use pre-processors, modules and perform various other tasks.\n\nSome of these transformations include:\n\n| Transformation       | Definition                                                                             |\n|----------------------|----------------------------------------------------------------------------------------|\n| Transpilation        | Adds backward compatibility for browsers that don't support new JavaScript syntax      |\n| Minify/Uglify        | Removes white space and shortens variable names to reduce the source code's file size. |\n| Bundling             | Organizes your dependencies and other codes into file bundles to optimize delivery.    |\n| Dead Code Elimination | Removes unused code paths from the bundle.                                             |\n\n# Build Tools\n\nThe following are some of the more popular build tools\n\n* [Parcel](#parcel)\n* [Rollup](#rollup)\n* [Webpack](#webpack)\n* [ES Build](#es-build)\n* [Snowpack](#snowpack)\n* [Browserify](#broserify)\n\n## Parcel\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9vmmuk2zwq600oplzsy.png)\n\n[Parcel](https://v2.parceljs.org/) is a neat build tool that can be used with zero configuration. It also supports [differential serving](https://v2.parceljs.org/getting-started/webapp/) which means it will build different bundles but only send down those optimized for the visitor's browser.\n \n## Rollup\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrqimrh70rnpn9tb30yq.png)\n\n[Rollup](https://rollupjs.org/guide/en/) describes itself as a module bundler that lets you compiles your [ES](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/)/[AMD](https://requirejs.org/docs/whyamd.html)/[common JS](https://requirejs.org/docs/commonjs.html) modules used into your project into your bundle. Rollup also has broader support for code splitting over parcel. Code Splitting is breaking up bundles into smaller independent bundles so that they only loaded on the pages that need them.\n \n\n## Webpack\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg7pz9nw10kipvl5cjm0.png)\n \n[Webpack](https://webpack.js.org/) is the most robust build tool on this list. Webpack has wide support for transformations such as dead code elimination, removing dead imported code and compressing images and svg. Webpack is also used by the angular CLI. However, webpack can be a bit daunting to pickup due to it's robustness.\n\n\n## ES Build\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt8vsjdn68jn4gd5q5in.png)\n\n[ES Build](https://esbuild.github.io/) describes itself as 'An extremely fast JavaScript bundler'. ES Build boasts a 10-100x speed boost over other alternatives in terms of build times. ES Build supports ES6 and CommonJS modules.\n \n\n## Snowpack\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg04arlxbdues7hwv61l.png)\n\n[Snowpack](https://www.snowpack.dev/) is a relatively new build tool on the scene and also boasts faster build times over parcel and webpack. Like the other tools snowpack can be used with libraries like React and Vue as an alternative to the default cli tool.\n \n\n## Browserify\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2urq7c7v3xv6n5kn8yf4.png)\n\n[Browserify](https://browserify.org/) started with the simple mission of allowing you to port your nodejs code to run in the browser. It can be used out of the box to compile a node script into a bundle that can be dropped into a web page. Browserify also supports other build tool features such as transformations and CSS \u0026 image imports.\n\n# Conclusion\n\nThis article is more an overview than a feature comparison. The [Tooling Report](https://tooling.report/) is your best guide to understand of the features supported by some of the tools mentioned here.\n\nIt is also worth mentioning these tools support 3rd party plugins for adding custom functionality. Build tools are an essential part of the modern development workflow, it helps keeps our sites fast, manageable and optimized.\n\n# Need More? 👀🔍\n\nWe are just at the halfway point in our journey in the frontend web ecosystem. Next week will be our 5th destination but there's so much to discover outside of this series. \n\nIf you are interested in hearing about great dev talks, new products, services and tools consider following me on [twitter](https://twitter.com/snickdx). Over there I share whatever comes across my radar that I think is worth checking out.\n\n# Resources\n* [Bundling Javascript](https://www.dottedsquirrel.com/bundling-javascript/)","positive_reactions_count":5,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--0E9ukkQu--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkazs1eybf4wi7kp5udv.png","tag_list":["codenewbie","beginners","javascript","hitchhikers"],"canonical_url":"https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-build-tools-3bj2","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":724885,"title":"The Frontend Hitchhiker's Guide: State Management","description":"Introduction   Have you ever needed to build a large SPA with react or vue? How do you keep...","published":true,"published_at":"2021-06-12T14:54:05.767Z","slug":"the-frontend-hitchhikers-guide-state-management-30ji","path":"/snickdx/the-frontend-hitchhikers-guide-state-management-30ji","url":"https://dev.to/snickdx/the-frontend-hitchhikers-guide-state-management-30ji","comments_count":0,"public_reactions_count":163,"page_views_count":8589,"published_timestamp":"2021-06-12T14:54:05Z","body_markdown":"# Introduction\n\nHave you ever needed to build a large SPA with react or vue? How do you keep the code base manageable? \n\nImagine you are building the following app where components share data and are updated in response to UI interactions.\n\n![To Do](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l00gg4kbkbsrds2d4swa.gif)\n\nThe data on the interface is often referred to as state, it exists in memory and must be synced to the database. \n\nHandling how that data is synced, shared and updated is what state management is about. You often hear the following terms associated with this concept:\n\n* [Reactive Programming](https://g.co/kgs/aoSZbv)\n* [Data Binding](https://en.wikipedia.org/wiki/Data_binding)\n* [Model View Controller](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)\n* [Observables](https://medium.com/@davidjtomczyk/introduction-to-observable-85a5122bf260)\n\nThe following are libraries that assist with it:\n\n1. [Redux](#redux)\n2. [ReactiveX](#bootstrap)\n3. [React Context](#react-context)\n4. [Vuex](#vuex)\n5. [Mobx](#mobx)\n6. [Do It Yourself](#do-it-yourself)\n\n# Redux\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tkv2gebmj86pfwy1465.png)\n\n[Redux](https://redux.js.org/) describes itself as a 'state container' (also called a [flux](https://medium.com/@alexishevia/the-simplest-flux-implementation-a8518ecae1e0) library) and implements the following architecture.\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqf3ye5dilp54yjo7aue.png)\n \nThe view is the user interface which allows the users to perform actions. Each action calls a type of function called a reducer which affects the application state that is saved in the store. The store then updates the UI.\n\nOutside of the big frameworks, redux was the first library dedicated to state management to appear on my radar. Redux can be used with other frameworks or UI libraries.\n\n# ReactiveX\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryuijuvoeex41h0gofb3.png)\n \nAs the it's website says [ReactiveX](http://reactivex.io/) combines [functional programming](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0) and the [Observer](https://en.wikipedia.org/wiki/Observer_pattern) \u0026 [Iterator](https://en.wikipedia.org/wiki/Iterator_pattern) design patterns. The library has various versions for different programming languages and frameworks such as [ngrx](https://ngrx.io/) for angular.\n\nReactiveX is about setting up streams which produce events that components can subscribe and react to.\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24r7uq7dv8d8yov6p86o.png)\n\nIf you like the aspects of functional programming such as immutability, purity and traceability (while debugging), you might enjoy working with reactivex.\n \n# React Context\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9eh9oj872cj6i7a3zm3z.png) \n\nIn the earlier days, react and redux was a popular combination. Nowadays you can get away with using [react context](https://reactjs.org/docs/context.html). Context allows components to share values without needing to pass props.\n\nReact apps are a tree of components with with the App component as the root. Context provides a singleton which is accessible by any component.\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbxsm29vswra6si2vr11.png)\n \nContext can make working with large react apps simpler without adding any dependencies. \n\n# Vuex\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ks6w91te41kw2x0fd2jt.png)\n\n[Vuex](https://vuex.vuejs.org/) is state management library for Vue.js applications. The following is how vuex apps are structured.\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in0wm3jfu9ksyxuwx3cv.png)\n\nThis is definitely wroth a look for medium to large vue apps. The vuex page has the following quote which I think rings true.\n\n\u003e Flux libraries are like glasses: you’ll know when you need them.\n \n# Mobx\n[Mobx](https://mobx.js.org/README.html) describes itself as simple, scalable state management. It organizes apps as follows.\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aebbxvj8fukf6qiat2o4.png)\n \nThe simpler structure of Mobx makes it easier to pickup over redux however, it sacrifices some scalability. Mobx can be used with UI libraries such as react or Vue. \n\n# Doing It Yourself\nState management implementations typically apply an [interactive architectural pattern](https://lostechies.com/derekgreer/2007/08/25/interactive-application-architecture/) to code so that it is organized, predictable and extendable. \n\nThis is related to a larger software engineering concept called [Design Patterns](https://dev.to/twinfred/design-patterns-in-javascript-1l2l). You can implement [your own state management system](https://blog.jeremylikness.com/blog/client-side-javascript-databinding-without-a-framework/) by applying the fundamental patterns like the [Observable](https://www.dofactory.com/javascript/design-patterns/observer). \n\n\n# Conclusion\n\nWhile it may take some time to pick up the coding style of a particular state management strategy, they tend pay off in the long term for extending large apps. This concludes stop number 3, see ya next week for next destination. Can you guess where we are going next? Place your guess in the comments.\n\n# Related Reading\n\n* [State Management Collection](https://github.com/collections/javascript-state-management)\n* [Redux](https://redux.js.org/)\n* [Who Needs State Management](https://medium.com/@vyaron/who-needs-state-management-anyways-55e6d1c74239)\n* [State Management Battle in React](https://dev.to/workshub/state-management-battle-in-react-2021-hooks-redux-and-recoil-2am0)\n* [To JS MVC Frameworks](https://www.infoq.com/research/top-javascript-mvc-frameworks/)\n* [What is React Context](https://dev.to/pagepro_agency/what-is-react-context-and-how-to-use-it-2gp7)\n* [MVC vs Flux vs Redux](https://www.clariontech.com/blog/mvc-vs-flux-vs-redux-the-real-differences)\n* [Redux vs Mobx](https://blog.logrocket.com/redux-vs-mobx/)\n","positive_reactions_count":163,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--wimm9jHL--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0329srtkv7alezrdn0js.png","tag_list":["hitchhikers","javascript","webdev","codenewbie"],"canonical_url":"https://dev.to/snickdx/the-frontend-hitchhikers-guide-state-management-30ji","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":713193,"title":"The Frontend Hitchhiker's Guide: Web APIs ","description":"Introduction   Web APIs or Web Browser APIs are built-in JavaScript Objects \u0026amp; functions...","published":true,"published_at":"2021-06-05T03:22:20.007Z","slug":"the-frontend-hitchhiker-s-guide-web-apis-1f6l","path":"/snickdx/the-frontend-hitchhiker-s-guide-web-apis-1f6l","url":"https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-web-apis-1f6l","comments_count":0,"public_reactions_count":21,"page_views_count":1169,"published_timestamp":"2021-06-05T03:22:20Z","body_markdown":"# Introduction\nWeb APIs or Web Browser APIs are built-in JavaScript Objects \u0026 functions that let us tap into various features of the browser. \n\nThese technologies are developed under various organizations such as the [World Wide Web Consortium](https://www.w3.org/) and anyone could make a [contribution](https://github.com/w3c/WebAppsWG) for any specification.\n\nWeb APIs are standardized which means they work out of the box, no libraries necessary for the browsers that support a particular API. However, libraries such as workbox and comlink really help for more complex use cases.\n\nThe following are some powerful capabilities of the browser that you probably thought only native apps could do.\n\n1. [Web Sockets](#web-sockets)\n2. [Web Workers](#web-workers)\n3. [Service Workers](#service-workers)\n4. [Speech Recognition](#speech-recognition)\n5. [Device Sensors](#device-sensors)\n6. [File System Access](#file-system-access)\n\n# Web Sockets\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ch7jf3d2llj8dbymf40o.png) \n\nIf you have ever used a web chat application, odds are this API is used under the hood. Web Sockets lets you set up a live connection between a client and a server so bi-directional messages can be exchanged in real time. [Socket IO](https://socket.io/) is the go to library to get up and running with this technology. \n\n**Demo**\n[Simple Web Socket App on REPL it](https://replit.com/@Snickdx/websocket-demo)\n\n**Resources**\n* [What are Web Sockets](https://pusher.com/websockets)\n\n# Web Workers\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0qpx3nmi40i6okhu2fq.png) \n\nWhile the JavaScript interpreter is single threaded. Web Workers allows us to spawn additional threads in the web browser. \n\nWhile web workers cannot interact with the DOM, they can work with other APIs and be used to offload work from the main thread. Data can also be exchanged between the main thread and web workers.\n\nThe main thread in the browser is responsible for keeping the UI fast and responsive. By moving work to a web worker you can make the main thread's job easier. \n\nThe [Comlink](https://github.com/GoogleChromeLabs/comlink) library can make working with web workers easier by making your worker objects available to your main JavaScript code.\n\n**Demo**\n[Web Worker Bubblesort](https://afshinm.github.io/50k/)\n\n**Resources**\n* [Building Blocks of Web Workers](https://blog.sessionstack.com/how-javascript-works-the-building-blocks-of-web-workers-5-cases-when-you-should-use-them-a547c0757f6a)\n* [The Basics of Web Workers](https://www.html5rocks.com/en/tutorials/workers/basics/)\n* [Web Workers Overview](https://web.dev/workers-overview/)\n* [Things You Can Do With A Web Worker](https://github.com/deebloo/things-you-can-do-in-a-web-worker)\n\n**[Browser Support](https://caniuse.com/?search=web%20socket)**\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nirxxxi4x9s8tn6wpgcf.png)\n\n# Service Workers\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgh5ti8i51c07x8g8btt.png)\n \n\n[The Service Worker API](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) is the genesis of the [Progressive Web App](https://web.dev/progressive-web-apps/) revolution. The service worker is a background JavaScript script that can do things such as:\n\n1. Intercepting network requests\n2. Caching network requests\n3. Precaching HTML, CSS, JS for working offline\n4. Push Notifications\n\nand much more. [Workbox](https://developers.google.com/web/tools/workbox) is probably the best library for building out your service worker to suit what ever advanced caching strategy you may need.\n\n**Example**\nI have a minimal PWA starter project below that works offline and even has an install button to add to the homescreen (on Chrome WIN \u0026 Android).\n \n[View on REPL.it](https://replit.com/@Snickdx/pwa-demo#index.html)\n\n**[Browser Support](https://caniuse.com/?search=service%20worker)**\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfjtx79emhgh9slmuhis.png)\n\n**Resources**\n* [Is Service Worker Ready?](https://jakearchibald.github.io/isserviceworkerready/)\n* [Service Workers: an Introduction](https://developers.google.com/web/fundamentals/primers/service-workers)\n \n\n# Speech Recognition\nThe web has native speech recognition. Using the [Web Speech API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API) you can build conversational experiences. You start by creating a WebSpeechRecognition object.\n\n```javascript\nif (!('webkitSpeechRecognition' in window)) {\n  upgrade();\n} else {\n  var recognition = new webkitSpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n\n  recognition.onstart = function() { ... }\n  recognition.onresult = function(event) { ... }\n  recognition.onerror = function(event) { ... }\n  recognition.onend = function() { ... }\n\n```\n\n\n**Examples \u0026 Resources**\n* [Dictation IO](https://dictation.io/speech)\n* [Web Speech Demo](https://www.google.com/intl/en/chrome/demos/speech.html)\n* [Google Developers](https://developers.google.com/web/updates/2013/01/Voice-Driven-Web-Apps-Introduction-to-the-Web-Speech-API)\n\n**[Browser Support](https://caniuse.com/?search=bluetooth)**\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78cwej2pvsasw2gntgr4.png)\n \n\n# Device Sensors\nPhones a full of sensors, we can use [Generic Sensor API](https://www.w3.org/TR/generic-sensor/) to measure the device orientation, ambient light, magnetic fields and acceleration.\n\n![1_vJkvQUQZuP4DjgO1znoNVQ](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wzryxkwp21407ae8jri.gif)\n\n**Demos**\n* [Punchmeter - Test your punch speed!](https://intel.github.io/generic-sensor-demos/punchmeter/)\n* [Orientation Phone](https://intel.github.io/generic-sensor-demos/orientation-phone/)\n\n**Resources**\n* [Generic Sensor API](https://github.com/intel/generic-sensor-demos)\n* [Sensors for the Web](https://web.dev/generic-sensor/)\n* [Gryocope](https://developer.mozilla.org/en-US/docs/Web/API/Gyroscope)\n* [Gyro: Web](https://itnext.io/gyro-web-accessing-the-device-orientation-in-javascript-387da43eeb84)\n\n**[Browser Support](https://caniuse.com/?search=sensor%20api)**\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6perqrfum3mp9jve89to.png)\n\n# File System Access\n\nThe [File System Access API](https://developer.mozilla.org/en-US/docs/Web/API/FileSystem) is really interesting because it allows the user to give access to a file on their device to a website. This can be applied in use cases to store user data on the device as opposed to a database. \n\n\n{% youtube P0qgI9Ad8vA %}\n\n**Demos**\n* [Excalidraw](https://excalidraw.com/)\n* [Text Editor](https://googlechromelabs.github.io/text-editor/)\n \n**[Browser Support](https://caniuse.com/native-filesystem-api)**\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53wegozvmgtf4qb6iyn0.png)\n\n**Resources**\n* [New in Chrome](https://www.youtube.com/watch?v=vy6FXa0n1r0)\n* [File System Access](https://web.dev/file-system-access/)\n \n\n# Conclusion\nThere are so many features we can use to build interesting applications. For APIs that are not yet supported on your browser of choice you might be able to find a [pollyfill](https://developer.mozilla.org/en-US/docs/Glossary/Polyfill) for it. What kind app ideas come to mind when you think of these APIs?\n\nThis is just our second stop in our frontend journey. Be on the lookout next week for stop number 3!\n \n# More on Web APIs\n* [What Web Can Do](https://whatwebcando.today/)\n* [Fugu API Tracker](https://fugu-tracker.web.app/)\n* [Web APIs You Probably Didn't Know Existed](https://www.youtube.com/watch?v=EZpdEljk5dY\u0026list=PLdDtziX2vawZLp8eGFIWuxV2nEg978EcY\u0026index=4)","positive_reactions_count":21,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--3SaKbiWS--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/599jlyb0fzx8bw95kdds.png","tag_list":["hitchhikers","javascript","webdev","codenewbie"],"canonical_url":"https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-web-apis-1f6l","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":712262,"title":"What is the JavaScript runtime?","description":"Why Should I care?   A basic understanding of asynchronous programming is needed to build dy...","published":true,"published_at":"2021-05-29T22:17:38.275Z","slug":"what-is-the-javascript-runtime-4n09","path":"/snickdx/what-is-the-javascript-runtime-4n09","url":"https://dev.to/snickdx/what-is-the-javascript-runtime-4n09","comments_count":3,"public_reactions_count":7,"page_views_count":117,"published_timestamp":"2021-05-29T22:17:38Z","body_markdown":"# Why Should I care?\nA basic understanding of asynchronous programming is needed to build dynamic [AJAX](https://en.wikipedia.org/wiki/Ajax_(programming)) web apps. Most frontend developers perform asynchronous programming when working with JavaScript and it is due to the nature of the JavaScript runtime.\n\n\n# What's a Runtime?\nA runtime is the environment in which a programming language executes. The runtime system facilitates storing functions, variables, and managing memory by using data structures such as queues, heaps and stacks (more on this later).\n\nBefore you proceed you should know about the following 3 computing concepts:\n\n{% details The Call Stack %}\n\nWhen you write a program, you may compose it of multiple functions. The call stack keeps track all function calls during throughout the life time of the program and execute them in the reverse order that they are called. \n\nHence why crashing a program with never ending recursive function calls is said to be a stack/buffer overflow. The stack had so many function calls that it ran out of memory space.\n\n![ezgif-6-6ad01ce45325](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yrprbz8c6909un4pe2r.gif)\n \n{% enddetails %}\n\n{% details Threads %}\nIn an OS you can run an program which can be comprised of processes. A process can then be comprised of multiple threads. A [thread](https://en.wikipedia.org/wiki/Thread_(computing)) is the smallest unit of computation that can be individually scheduled.\n{% enddetails %}\n\n{% details Multithreading %}\nComputers with multiple cores can process multiple threads at the same time. Some programming languages support multithreading by allowing your program to spawn child threads to perform a task then return the result to the parent. Such runtime would provide multiple call stacks. Each call stack is delegated to a thread.\n{% enddetails %}\n\n# What makes JavaScript's runtime so special?\n\nBy design the JavaScript interpreter is single-threaded, this is a good thing because it makes it easier to implement browsers for all kinds of devices, consoles, watches fridges etc. \n\nBut then you may wonder how do web apps work if the interpreter can only do one thing at a time? Well even though JavaScript is single threaded, it executes tasks in a concurrent fashion.\n\nSimply put, concurrency is breaking up tasks and switching between so quickly that they all **appear** to progress at the same time. Contrast this with parallelism which is performing tasks simultaneously.\n\n![yza7n2jl2oscv8gtiu9v](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2np473l374a1iipzjos.png)\n \n\nThis means that there must be some scheduling mechanism to determine which task's turn is next. That leads us to the next section.\n\n# The Queues \u0026 The Event Loop\n\nAll functions must eventually reach the call stack to be executed. However, depending on where a function is called will affect its priority in reaching the call stack.\n\n| Function Call        | Timing                                              | Example                                        |\n|----------------------|-----------------------------------------------------|------------------------------------------------|\n| Normal function call | Straight to the call stack                          | fun()                                          |\n| In a task            | Goes to task queue then onto the call stack         | Web APIs such as setTimeout(fun, 1000);        |\n| In a microtask       | Goes to the micortask queue then onto the call stack | After a promise resolves eg fetch().then(fun); |\n\nTasks and microtasks are operations in JavaScript which must go on a queue before reaching the call stack. \n\nThe event loop is a mechanism in the runtime that moves tasks and  microtask from their respective queue onto the call stack.\n\n![ezgif.com-gif-maker](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqsvgaamzoy6qsq5fvdu.gif)\n\nThe event loop will execute 1 task at until the [browser renders](https://blog.logrocket.com/how-browser-rendering-works-behind-the-scenes-6782b0e8fb10/) the next frame of pixels onto the display. However with microtasks, all will be executed before the next render.\n\n# ...OK but what does this all mean?\nSimply put, certain operations in JavaScript are executed with different priority levels. Therefore these operations may finish their execution in a **different** order than they were called. This is what happens in **Asynchronous Programming** and it can throw off programmers new to the concept.\n\nfetch() is an example of an async call. Appreciating that it is asynchronous will help you use it properly. For example a common pitfall is the following.\n\n```javascript\nlet myreponse = 'loading...';\n\nfetch('https://data.org/users')\n   .then(function(response){ \n      myresponse = response; //executes 2nd\n    });\n\nhandleResponse(myresponse); //executes 1st, does not get the response\n```\nBecause [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) is an async call, the function which assigns myresponse to response will go on the task queue and will execute **AFTER** handleResponse(). Hence handleResponse() will be called with the value 'loading...' instead of the actual response.\n\nIf you need to do something with the output of a async call, it should be done within the scope of the task.\n\n```javascript\n//avoid using global variables with async\n\nfetch('https://data.org/users')\n   .then(function(response){\n      handleResponse(response); //gets the response\n   });\n```\n\nThis can be shortened further because handleResponse() takes only one parameter.\n\n```javascript\nfetch('https://data.org/users').then(handleResponse);\n```\n\n# Conclusion\nAnd that's what the JavaScript Runtime is about! If things got too heavy that's ok. Just keep in mind that some functions in JavaScript are async and may not run in the order you expect. When that happens you should read up on it to know how to use it property.\n\nThe animations in the post was created with this awesome tool called [JS Visualizer 9000](https://www.jsv9000.app/).\n\nHere are some great talks that also explain this concept more visually:\n\n1. [Philip Roberts - What the heck is the event loop anyway](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n2. [Jake Archibald - In the Loop](https://www.youtube.com/watch?v=cCOL7MC4Pl0)\n \n\n# References\n* [History of JavaScript](https://www.springboard.com/blog/data-science/history-of-javascript/#:~:text=JavaScript%20Origins\u0026text=In%20September%201995%2C%20a%20Netscape,LiveScript%20and%2C%20later%2C%20JavaScript.)\n* [Tasks, microtasks, queues and schedules](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n* [Program vs process, vs thread vs task](https://jogendras.wordpress.com/2014/09/26/program-vs-process-vs-thread-vs-task/)","positive_reactions_count":7,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--ajJZwYeI--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/331zu8hnpgojuo23vtmc.png","tag_list":["javascript","codenewbie","async"],"canonical_url":"https://dev.to/snickdx/what-is-the-javascript-runtime-4n09","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":711648,"title":"The Frontend Hitchhiker's Guide: UI Libraries","description":"About the hitchhikers series   This is a series of posts dedicated to help devs discover and...","published":true,"published_at":"2021-05-29T03:10:54.951Z","slug":"the-frontend-hitchhiker-s-guide-ui-libraries-59cm","path":"/snickdx/the-frontend-hitchhiker-s-guide-ui-libraries-59cm","url":"https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-ui-libraries-59cm","comments_count":2,"public_reactions_count":86,"page_views_count":5062,"published_timestamp":"2021-05-29T03:10:54Z","body_markdown":"# About the hitchhikers series\n\nThis is a series of posts dedicated to help devs discover and navigate the web ecosystem. Look, web development is vast and intimidating everyone could use a guide.\n\n\n# User Interface Libraries\n\nUI libraries are third party code that traditionally provide UI components and utility classes used by developers to create apps. Classes that affect styling \u0026 layout and resuable UI components are typically provided the library. More modern libraries may also provide syntax for creating stateful components.\n\nThe following are some popular libraries.\n1. [Tailwind CSS](#tailwind-css)\n2. [Bootstrap CSS](#bootstrap)\n3. [Materialize CSS](#materialize-css)\n4. [jQuery](#jquery)\n5. [Reactjs](#reactjs)\n6. [Vuejs](#vuejs)\n\n# Tailwind CSS\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wghytwhjryvhlsy5y4e0.png)\n \nThese days it feels like this wouldn't be a Dev.to post without mentioning [tailwind](https://tailwindcss.com/). It's a highly popular library for good reason. There's so many utility classes you can tweak the smallest details of you app needing to write any CSS.\n\n# Bootstrap\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1kgzwhylmrz3xxwm6wo.png)\n \nAnother popular library that is usually the first for many devs is [Bootstrap](https://getbootstrap.com/). It's not as flexible as tailwind but its easy to use and has tons of themes, and examples.\n\n# Materialize CSS\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqos2k4pegzqsv700xh7.png)\n \nThis is my personal pick for putting together a web app quickly. [Materialize CSS](https://materializecss.com/) is great for making an app that follows the material design specification.\n\n# jQuery\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jvef2vnalxws079g0c6.png)\n \nThis legacy library is more of an honourable mention. Around 2017-2019 it was unfathomable to build a website without [jQuery](https://jquery.com/). It provided easy to use APIs for cross browser DOM manipulation, AJAX and attaching event handlers. \n\nSince then the standardization of APIs such as document.querySelector() and fetch() have somewhat replaced the common use cases for the library. \n\nHowever, jQuery is still used today and has spawned other projects like [jQuery UI](https://jqueryui.com/) and [Quint](https://qunitjs.com/).\n\n# React JS\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hn48yyzfauuejgy9gly2.png)\nYou are probably wondering why this wasn't at the top. According to the [State of JS survey](https://2020.stateofjs.com/en-US/technologies/front-end-frameworks/), [ReactJS](https://reactjs.org/) has been the most used 'Front-end Framework' since 2016. React is featured 5th in this post because it is both a library and a framework.\n \nReact allows for a gradual adoption where you can [use it as a drop in library] (https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html). However, it is recommended to be used more like a framework by utilizing the CLI tool for bootstrapping and compiling a project. \n\nReact is also different from the aforementioned options as it allows you to create reusable components that have state. For example you can create a new element with a custom tag such as `\u003ccounter\u003e\u003c/counter\u003e`. \n\nCounter is made up of a two buttons and a number input field such that the buttons change the field's value. The counter element can be reused multiple times and each counter's value can be easily accessed and reassigned. Instead of providing UI components, react allows you to create your own.\n\nIn my opinion React's documentation is easy to follow and the basics can be picked up fairly quickly. React also boasts a declarative coding style that allows you to write more predictable code that is easier to debug.\n\n# Vue JS\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wz5wehmn4kaofqw6m8bs.png)\n \n\n[Vue](https://vuejs.org/) feels is like the de facto react alternative. It argues some performance improvement over react and doesn't require you to write JSX or CSS in JavaScript. \n\nVue is the third most popular 'Front-end Framework' behind Angular and then React (State of JS Survey). Unlike the other frameworks, Vue was not created within a big tech company like Facebook (react) or Google (angular). It is impressive to see how far the Vue ecosystem has come from just a community backing.\n\n# Conclusion\nThat concludes our visit to our first destination on this journey. There's 7 more stops to go! If you found this informational please consider following me on [dev.to](https://dev.to/snickdx) or on [twitter](https://twitter.com/snickdx) so you won't miss the next post in this series. \n\nWhat is your favourite UI Library and why?\n\n# References\n* [State of JS](https://2020.stateofjs.com/en-US/technologies/front-end-frameworks/)\n* [Vuejs Comparison with Other Frameworks](https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-ui-libraries-2jje-temp-slug-4600245/edit)","positive_reactions_count":86,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--9MIbAnbK--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi0n0nnmry0wyi0462yh.png","tag_list":["webdev","hitchhikers","javascript","codenewbie"],"canonical_url":"https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-ui-libraries-59cm","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":688056,"title":"On Becoming A Better Junior Developer","description":"Cover Image Credit  Based on my experience both as a junior dev and as someones with some experience...","published":true,"published_at":"2021-05-06T21:45:46.808Z","slug":"on-becoming-a-better-junior-developer-4eb1","path":"/snickdx/on-becoming-a-better-junior-developer-4eb1","url":"https://dev.to/snickdx/on-becoming-a-better-junior-developer-4eb1","comments_count":0,"public_reactions_count":4,"page_views_count":189,"published_timestamp":"2021-05-06T21:45:46Z","body_markdown":"[Cover Image Credit](https://www.freepik.com/vectors/hand)\n\nBased on my experience both as a junior dev and as someones with some experience managing them, here of some things I think junior devs should keep in mind for greater success.\n\n# Seek guidance 🆘🗺\nStarting off can be tough, you may suffer from imposter syndrome or your tasks can be overwhelming. It is important to lead on your senior devs to help point you in the right direction. If you are unclear or something or completely lost it is important to communicate it as soon as possible. A good company should anticipate this for junior devs and provide mentors to guide you.\n\n# Ask better questions 🔍🤔\nWhile you are encouraged to reach out for help keep in mind that other developers do have their own work. If your first response to every error or problem is to run for help, it can get bothersome for your seniors really quickly. You should definitely try to hash it out on your own, common errors are very googleable and it is likely you'll find an answer on stack overflow. Then if that doesn't work you can know more about the problem when you finally ask for help.\n\nInstead of saying:\n* My code is broken please help.\n\nYou can say:\n* Hi I'm trying to use package x to do y but I got this error and stack overflow says to z but it's not quite there yet. Have you seen this before?\n\n\n# Elicit Feedback ❓📃\nWhen starting off, you are mostly aiming to simply get the code to work. However, there are more aspects to quality software such as design, reasonable naming and readability. It's important to get feedback to seek opportunities for improvement. You can ask questions such as \"Is what I'm doing here makes sense?\", \"can this be done better/cleaner?\".\n \n# Be a team player 🥇🤝🏻\nIf you are working with other junior devs you may be tempted to show them up in order to stand out. However, this attitude is not in the best interest of the product as a whole. Rather you can gain more points by looking out for your co-workers, helping when you can and building trust. This would show that you are thinking about the success of the team as a whole and are probably able to take on more responsibility.\n\n# Take initiative 👏🏽👀\nWhen you find yourself with extra time on your hands you are presented with an opportunity to show initiative. While I'm not saying to just run off and push code to production, instead, consider what is is a wider picture of the task you just completed. Think about how other components relate to your work, maybe you can work on making that interface more convenient for others or even adding some documentation. This will indicate that you are thinking about the work at a higher scope than was initially assigned.\n\n\n# Understand what 'done' means ✔🚢\nVery often we make assumptions when communicating as tech people. Often this ambiguity results in deliverable not quite meeting the expectations. Your idea of 'done' may differ from what a senior dev is looking for. To help with this it is important use project management tools like jira, trello, etc to document exactly what is required. Concepts like [user stories](https://en.wikipedia.org/wiki/User_story) and [acceptance tests](https://www.tutorialspoint.com/software_testing_dictionary/acceptance_testing.htm) are good for fleshing out these details. \n\nYou can also just simply ask \"What exactly you should be able to do if this task is to be considered completed?\" \n\nFor example, your deliverable may require: \n\n* Its own unit tests\n* Deployment to a staging environment\n* Integrated into a branch and passed all tests\n* Need to be runnable on the command line taking input from a file\n* Properly documented and staged in its own repository.\n\nSeeking clarity on this can save you from looking like you half-assed task when you simply didn't know what was required.\n\n# Conclusion\nThese are just my thoughts on what helped me and what I'd like to see from developers that I work with. What other tips would you recommend?\n\n\n","positive_reactions_count":4,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--Igp0CoAb--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhd2fz2khlbefa3oaxmx.jpg","tag_list":["career","webdev","promotion"],"canonical_url":"https://dev.to/snickdx/on-becoming-a-better-junior-developer-4eb1","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":669811,"title":"Web Apps from scratch: Forms","description":"Getting into form ☑   Forms are a fundamental component of web applications. They allow us t...","published":true,"published_at":"2021-05-02T03:39:14.929Z","slug":"web-apps-from-scratch-forms-3oo5","path":"/snickdx/web-apps-from-scratch-forms-3oo5","url":"https://dev.to/snickdx/web-apps-from-scratch-forms-3oo5","comments_count":0,"public_reactions_count":12,"page_views_count":194,"published_timestamp":"2021-05-02T03:39:14Z","body_markdown":"# Getting into form ☑\nForms are a fundamental component of web applications. They allow us to validate and take input from users which become structured data in our databases. This post will go through some of the basics of forms.\n\n\n# The Form element \u0026 attributes\nThe form element is created with the form tab and has the following attributes:\n\n* autocomplete: can disable the browser's autocomplete, values \"on\" or \"off\"\n* method: specified the HTTP method, values \"GET\" or \"POST\"\n* enctype: affects the [MIME Type](https://www.iana.org/assignments/media-types/media-types.xhtml) of the data submitted. Values:\n   * application/x-www-firn-urlencoded\n   * text.plain\n   * mutlitpart/form-data\n\n# Form input elements\nIt's important to use the appropriate input elements for the data needed. Some elements have a dedicated tag while others are attributes on the input tag.\n\n* Selecting a single value from a list\n  * input[type=\"radio\"]\n  * select\n  * datalist\n* Selecting multiple values from a list\n  * select (with \"multiple\" attribute)\n  * input[type=\"checkbox\"] multiple boxes with the same name\n* Boolean Values: single checkbox\n* Time : input[type= \"week|time|datetime|date|week|month|datetime-local\"]\n* Numeric\n  * input[type=\"text\" inputmode=\"numeric|decimal\"]\n  * input[type=\"number\"]\n  * input[type=\"range\"], gives a slider (best used for small ranges)\n  * Files : input[type=\"file\"]\n  * password : input[type=\"password\"]\n* Email : input[type=\"email\"]\n* Telephone : input[type=\"telephone\"]\n* URL : input[type=\"URL\"]\n\n# Form validation\n\nWe can add simple validation to our forms to prevent them from submitting unless certain conditions are met.\n\nThis is done via validation attributes such as:\n\n* required: field must contain a value\n* minlength: specifies the minimum length of valid input\n* pattern: field must match with the specified [Regular Expression](https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/).\n\nInputs with type=email/url/telephone will also validate input appropriately.\n\n# Form Submission\n\nBy default, an HTML form element will make a GET request to the current URL and append the form data as a [query string](https://en.wikipedia.org/wiki/Query_string).\n\nFor Example the following form:\n```html\n\u003cform id=\"myform\"\u003e\n     \u003cinput type=\"text\" name=\"username\"/\u003e\n     \u003cinput type=\"password\" name=\"password\"/\u003e\n     \u003csubmit\u003eSend\u003c/submit\u003e\n\u003c/form\u003e\n```\nWould redirect the browser to /?username=bob\u0026password=pass when the form is submitted with the values 'bob' and 'pass'. Normally there would be code on the backend that will receive the data from the URL.\n\nWe can override these defaults with the method and action attributes mentioned earlier.\n\nAlternatively, for [single-page applications](https://en.wikipedia.org/wiki/Single-page_application) we can use javascript to prevent the page redirect and submit the form. \n\n```javascript\ndocument\n  .querySelector('#myform')\n  .onsubmit = async function(event){\n      event.preventDefault();//prevent the form submission\n      const formData = new FormData(event.target);\n      //pull out all the data from the form\n      const data = Object.fromEntries(formData.entries());\n      const response = await fetch(\n         '/myserver', \n         { \n           method:'POST', \n           body:JSON.stringify(data)},\n           headers: { 'Content-Type': 'application/json'}\n         }\n      );//send data to the server\n      const text = await reponse.text;\n      alert(text); //alerts the server's reponse\n}\n```\nThe snippet above prevents the page redirect and sends the form data as JSON to the URL provided.\n\n# Going Deeper\nYou can see a more in-depth example at this \n [Repl](https://replit.com/@Snickdx/forms-demo#index.html) that will allow you to change the content types and see the response from the server.\n\n# Conclusion\nThis concludes the basics of HTML forms as you can see, there's much you can accomplish with standard HTML and Javascript. \n","positive_reactions_count":12,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EwY-_wpk--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdrcoaz0as33uz93stls.png","tag_list":["html","javascript","webdev","vanilla"],"canonical_url":"https://dev.to/snickdx/web-apps-from-scratch-forms-3oo5","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":641512,"title":"Web Apps From Scratch: Modals","description":"Introduction   Hi, this post will be the first from a series called \"Web Apps From Scratch\"...","published":true,"published_at":"2021-03-21T20:57:42.320Z","slug":"web-apps-from-scratch-modals-20fb","path":"/snickdx/web-apps-from-scratch-modals-20fb","url":"https://dev.to/snickdx/web-apps-from-scratch-modals-20fb","comments_count":0,"public_reactions_count":12,"page_views_count":117,"published_timestamp":"2021-03-21T20:57:42Z","body_markdown":"# Introduction\nHi, this post will be the first from a series called \"Web Apps From Scratch\" were I explore common UI patterns implemented with modern and standard web technologies (which means NO frameworks/libraries).\n\nNow the motivation isn't to be against frameworks but instead, appreciate what they do for us by building without them. Additionally, we also have the opportunity to try out new HTML elements, css and javascript features.\n\n# Modals\n\nModals are a very popular UI component. When's the last time you have used alert, confirm and prompt? Modals give us a means to flash contextual content or ask for user input in a popup fashion that we may style to our liking.\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evy6lincrc8wzk3qk96m.png) [Photo Credit: UX Planet](https://www.google.com/url?sa=i\u0026url=https%3A%2F%2Fuxplanet.org%2Fbest-practices-for-modals-overlays-dialog-windows-c00c66cddd8c\u0026psig=AOvVaw0rEUJ1RFHgltjpYhzOUKFd\u0026ust=1616442351659000\u0026source=images\u0026cd=vfe\u0026ved=0CAMQjB1qFwoTCNj3npSTwu8CFQAAAAAdAAAAABAD)\n\n\n# The Dialog Element\nHowever, there is an HTML 5 element for this. It is called the [dialog](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) which gives us some good functionality and accessibility out of the box for the browsers that support it.\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i57sf85aqriniimw81hn.png)\n\nThe API is fairly straightforward, to get started we add a dialog tag to the page like this.\n\n```html\n\u003cdialog role=\"dialog\" aria-modal=\"true\" id='myDialog' class=\"modal-content card\"\u003e\n  \u003cbutton id=\"closeModal\"\u003e\u0026times;\u003c/button\u003e\n  \u003ch1\u003ePerson Details\u003c/h1\u003e\n  \u003cmain\u003e\u003c/main\u003e\n\u003c/dialog\u003e\n```\n\nThe role and aria-modal are [ARIA](https://www.w3.org/TR/html-aria/) attributes that enhance the accessibility of the page.\n\n\u0026times is a [HTML Symbol](https://www.toptal.com/designers/htmlarrows/) which renders a neat X that we can use for a close button.\n\nNow the intended behaviour of the dialog to not display its content unless an \"open\" attribute is put into the tag. In Chrome, however, it shows by default so I apply the following style to override this behaviour.\n\n```css\ndialog:not([open]) {\n    display: none;\n}\n```\n\n# Stateful UI\nNext, oftentimes we would like to pass data to our dialog but we cannot rely on a framework's state management in this series. One solution would be to utilize event-driven programming and pass data in our elements and the events they emit. For example we have a collection of people data we would like to display.\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdduveg0mylnnv2zwsm4.png)\n\nThe first name is given on the card but when a details button is clicked, more data can be seen on the modal.\n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okwubnfsiibx81vnf037.png)\n\nThese cards can be rendered by the client or by the server but in order to have each card pass its data to the modal, we can make use of the [data attribute/custom attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes).\n\nThe markup of the cards is as follows:\n\n```html\n\u003csection\u003e\n    \u003cdiv class=\"card\"\u003e\n      \u003cp\u003eJohn Smith\u003c/p\u003e\n      \u003cbutton  data-firstname=\"John\" data-lastname=\"Smith\" data-age=\"35\" data-height=\"5.11\" onclick='onModalOpen(event)'\u003eDetails\u003c/button\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"card\"\u003e\n      \u003cp\u003eSally Smith\u003c/p\u003e\n      \u003cbutton  data-firstname=\"Sally\" data-lastname=\"Smith\" data-age=\"31\" data-height=\"6.1\" onclick='onModalOpen(event)'\u003eDetails\u003c/button\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"card\"\u003e\n      \u003cp\u003ePaul Smith\u003c/p\u003e\n      \u003cbutton  data-firstname=\"Paul\" data-lastname=\"Smith\" data-age=\"29\" data-height=\"5.2\" onclick='onModalOpen(event)'\u003eDetails\u003c/button\u003e\n    \u003c/div\u003e\n\n\u003c/section\u003e\n\n```\nIn each button, we embed the data of the corresponding person, this may be an id instead which then can be used to retrieve the data. Also when we call the eventHandler in the onclick attribute we need to make sure to pass the [event](https://developer.mozilla.org/en-US/docs/Web/API/Event) object.\n\nNow in the event handler to the button's click event, we can get the specific button and the relevant data. \n\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bd6ug8fc2l0rs5z0vi5.png)\n \n\n```javascript\n    const dialog = document.querySelector('#myDialog');\n    function onModalOpen(event){\n      const button = event.target;//get the button from the event\n      const buttonData = button.dataset;\n      const html  = dataTemplate(buttonData);//get the values of all data attributes\n      document.querySelector('dialog \u003e main').innerHTML = HTML;\n      //querySelector over getElementById, more flexible and doesn't require making ids\n      dialog.showModal();\n      //showModal() method available on all dialog elements to display the dialog on the screen\n    }\n```\nbuttondata is a [DOMStringMap](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap) basically an object which contains the keys and values of the data attributes as strings. When we log buttonData we get the following. We than pass buttonData to a templating function that uses [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) to return the dynamic HTML that should be displayed in the modal.\n\n```javascript\n    function dataTemplate({firstname, lastname, age, height}){\n      //using object destrucuring to get the fields of the object\n      return `\u003cp\u003eFirst Name: ${firstname}\u003c/p\u003e\n              \u003cp\u003eLast Name: ${lastname}\u003c/p\u003e\n              \u003cp\u003eAge: ${age}\u003c/p\u003e\n              \u003cp\u003eHeight: ${height}\u003c/p\u003e`;\n      //using template literals to interpolate data\n    }\n```\nWe also make use of [destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to pull out the data fields as variables.\n\n# Polyfills\nWhenever a browser currently lacks the support of a standard feature often a library called a polyfill is made so that it doesn't break. We can add the pollyfills to the page so that the modal still works on safari and firefox.\n\n```html\n\u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/dialog-polyfill/0.5.6/dialog-polyfill.min.js\"\u003e\u003c/script\u003e\n\u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/dialog-polyfill/0.5.6/dialog-polyfill.min.css\"\u003e\n```\n\n# Coming to a close\nTo close the modal we just add another event handler to our close button.\n\n```javascript\nconst closeModal = document.querySelector('#closeModal');\ncloseModal.addEventListener('click', function(){ \n  dialog.close(); \n  document.body.focus();\n});\n```\nWe set the body back to focus so assistive devices such as screen readers would know to go back to the main part of the page when closing the modal.\n\n# Conclusion\nWhen we putting this all together, we get the following result.\n\n![https___nativemodal.snickdx.repl.co](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x108qkzy5xeltme7mi1t.gif)\nYou can see the complete example at [this Repl link](https://replit.com/@Snickdx/nativemodal#index.html). I hope this first post of the series we informative and stay tuned for the nest one!\n\n \n\n\n\n\n \n\n\n\n\n ","positive_reactions_count":12,"cover_image":null,"tag_list":["html","webdev","ui","javascript"],"canonical_url":"https://dev.to/snickdx/web-apps-from-scratch-modals-20fb","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":620905,"title":"8 Amazing Dev talks you should check out.","description":"Web developer conferences are a great way to learn about developments in the industry and understand...","published":true,"published_at":"2021-02-28T21:36:39.331Z","slug":"8-amazing-dev-talks-you-should-check-out-23mg","path":"/snickdx/8-amazing-dev-talks-you-should-check-out-23mg","url":"https://dev.to/snickdx/8-amazing-dev-talks-you-should-check-out-23mg","comments_count":3,"public_reactions_count":159,"page_views_count":2089,"published_timestamp":"2021-02-28T21:36:39Z","body_markdown":"Web developer conferences are a great way to learn about developments in the industry and understand the fundamentals of a particular topic. Today I would like to share a collection of some of my favourite talks.\n\n# 1. How to Begin Thinking like a Programmer 🤔👩🏽‍💻\n\n**Level: Beginner**\n**Event: [IndyPy 2016](https://twitter.com/indypy)**\n\n[Andy Harris](https://www.youtube.com/channel/UCIhnHoRkoJmkWwLz2jBpgNQ) relates his years of teaching experience to shed light on the common misconceptions of both teaching and learning programming. It's a great talk for newbies and experienced devs alike.\n  \n{% youtube YWwBhjQN-Qw %}\n\n# 2. Web Requests, Down to the Atom 🕸⚛\n\n**Level: Beginner**\n**Event: [Web Unleashed 2019](https://fitc.ca/event/webu19/)**\n\nAs the name implies, [Chris Zacharias](https://twitter.com/zacman85) talk on the web fundamentals goes into minute detail about what happens under the hood. As mentioned in his talk, understanding the fundamentals lets us become better at identifying performance opportunities among other benefits.\n\n{% youtube LMLULve1ip8 %}\n\n\n# 3. 4 Programming Paradigms in 45 Minutes ⏲👩🏻‍🏫\n**Level: Beginner**\n**Event: Ruby Conf 2017**\n\n[Aja Hammerly's](https://twitter.com/the_thagomizer) \n\n\u003e One of the most important lessons I've learned is that programming languages are tools and not all tools are good for all jobs. You'll leave this talk with a better understanding of which languages are best suited to which types of jobs and a list of resources for learning more.\n\nI enjoy the academic spirit of this talk. It will give you an insight into what students learn in a university Computer Science course.\n\n{% youtube 3TBq__oKUzk %}\n\n# 4. 6 Things Your Junior Devs Don't Tell You 👀😶\n\n**Level: Intermediate**\n**Event: [You Gotta Love Front End 2016](http://2016.yougottalovefrontend.com/#page-home)**\n\nWhile [Netta Bondly's](https://twitter.com/_bondit_) talk targeted for senior developers it is also truly encouraging for newbies. She gives helpful guidelines to ensure you provide an environment to foster the growth of your junior developers. This is a must-see for developers seeking leadership roles.\n\n{% youtube m6G8f9pZZRM %}\n\n# 5. The UX Infinity Gems 6 Ways to Create Great UX 💎🎨 \n\n**Level: Intermediate**\n**Event: DevCon 2017**\n\n[Jordan Lawerence's](https://dribbble.com/Jordan_Lawrence) talk gives a great demonstration in applying the fundamentals UI/UX design in a web application.\n\n{% youtube aZZCZpc0AcY %}\n\n# 6. What the heck is the event loop anyway? 🎉➰\n**Level: Intermediate**\n**Event: [JSConf EU 2014](https://2014.jsconf.eu)**\n\nThis is one of the de facto talks available for understanding the asynchronous javascript runtime. [Philip Roberts](https://twitter.com/philip_roberts) gives a visual and straightforward explanation of a unique and important mechanism in the javascript interpreter.\n\n# 7. Static generated sites === great performance. What are you waiting for? 📈📱\n**Level: Intermediate**\n**Event: [JAM Stack Conference 2019](https://2019.jamstackconf.com/sf/)**\n\n[Debbie O'Brien's](https://twitter.com/debs_obrien) talk sheds to light on a modern methodology for building performant web applications. This talk challenges what we typically consider to be a 'static' site and what they can do.\n\n{% youtube H793eyVM_04 %}\n\n# 8. The Art of Code 🎭👨🏻‍💻\n**Level: Intermediate**\n**Event: [Build Stuff 2019](https://buildstuff2019.sched.com/)**\n[Dylan Beattie's](https://twitter.com/dylanbeattie?lang=en) gives a fascinating talk on how the areas of philosophy, science, coding and art aren't as separate one might expect. It's a fun talk about having fun with code best described by the author's own words \"Beautiful, yet completely useless\".\n\n{% youtube gdSlcxxYAA8 %}\n\n# Conclusion\nThose are just some of my favourite talks. If you enjoyed these talks I have a public collection with more of them that I maintain at an app called [keen](https://staykeen.com/keen/uHsJwNvBdP1zRNXvF6Be/v/WQJeqpFgdeCJnMHyeblw). What are your favourite talks? Please share in the comments!\n\n","positive_reactions_count":159,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--9yMrl-7C--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/topfoo2a11ftp7rr6q54.png","tag_list":["webdev","javascript","design","codenewbie"],"canonical_url":"https://dev.to/snickdx/8-amazing-dev-talks-you-should-check-out-23mg","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":589895,"title":"Projects you can build after 2 months of learning web","description":"Today I would like to share a collection of projects built by first-time web developers. These apps w...","published":true,"published_at":"2021-02-10T04:46:55.450Z","slug":"what-can-you-build-after-2-months-of-learning-web-1c5e","path":"/snickdx/what-can-you-build-after-2-months-of-learning-web-1c5e","url":"https://dev.to/snickdx/what-can-you-build-after-2-months-of-learning-web-1c5e","comments_count":0,"public_reactions_count":2,"page_views_count":39,"published_timestamp":"2021-02-10T04:46:55Z","body_markdown":"Today I would like to share a collection of projects built by first-time web developers. These apps were after 2 months of learning web. In these courses, we teach fundamentals with just plain HTML, CSS, JS and no frameworks. Students are encouraged to use 3rd party APIs to power the features of their app and deploy using free hosting services.\n\n# 1. [The Food Bible](https://info-1601-project-foodbible.firebaseapp.com/#!)\n\n![info-1601-project-foodbible.firebaseapp.com_](https://dev-to-uploads.s3.amazonaws.com/i/jgd0bm8idw6p34seyid0.png) \n\nThis app uses [materialize css library](https://materializecss.com/) and [edmam](https://www.edamam.com/) recipe search API so users can search recipes with dietary options.\n\n# 2. [Moosic Social](https://musicapp-1fb91.firebaseapp.com/?path=%2F)\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/unwzorym10v2vtoiy89d.png)\n\nWhile it is was not taught, this group took it upon themselves to learn [react.js](https://reactjs.org/) and use [firebase](https://firebase.google.com/) auth and real-time database to build a social media app.\n\n# 3. [Fun Cookie Clicker](https://interlinked-b9a18.web.app/)\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/7eouz6avjme90r5jshcj.png)\n\nThis charming game lets you score points by simply clicking, you can activate several upgrades to boost your points growth.\n\n# 4 [Gaming World TT](https://gaming-world-tt.web.app/store.html)\n\n![gaming-world-tt.web.app_store.html](https://dev-to-uploads.s3.amazonaws.com/i/7ib3sgimr7dfmmttlfcu.png)\n\nThis video game storefront demo is very convincing. Visitors can even login via google.\n \n# 5 [Covid-19 Tracker](https://xdj-covid-19-tracker.web.app/)\n\n![xdj-covid-19-tracker.web.app_](https://dev-to-uploads.s3.amazonaws.com/i/fwf4qoyrfyih8wn0ygvr.png)\n \nSome groups even worked on solutions around covid-19. This app utilizes a [covid-19 API](https://github.com/mathdroid/covid-19-api) based on the John Hopkins University dataset.\n\nThere are dozens of more projects like these and they are all available at [https://dcit-web.web.app/gallery](https://dcit-web.web.app/gallery).\n\n# Final thoughts\n\nModern web APIs, services and tools have really come far in bringing down the barrier to web development. If you may be interested in learning web dev online or have thoughts about what a web course should contain; please consider filling out this [short survey](https://forms.gle/9RxJYjHAXpGU6bTw9).\n ","positive_reactions_count":2,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--MEvQ9k9J--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/olvq0ndedvgw7z7zx9tz.png","tag_list":["inspiration","webdev","html","api"],"canonical_url":"https://dev.to/snickdx/what-can-you-build-after-2-months-of-learning-web-1c5e","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":573063,"title":"Understanding Rendering in Web Apps: CSR vs SSR","description":"In this final post of the series, we shall compare the pros of cons of Client-Side Rendering (CSR) an...","published":true,"published_at":"2021-01-30T18:44:47.574Z","slug":"understanding-rendering-in-web-apps-csr-vs-ssr-43d","path":"/snickdx/understanding-rendering-in-web-apps-csr-vs-ssr-43d","url":"https://dev.to/snickdx/understanding-rendering-in-web-apps-csr-vs-ssr-43d","comments_count":2,"public_reactions_count":27,"page_views_count":2104,"published_timestamp":"2021-01-30T18:44:47Z","body_markdown":"In this final post of the series, we shall compare the pros of cons of Client-Side Rendering (CSR) and Server Side Rending (SSR).\n\nJust a recap of the terms:\n* CSR: When web applications use AJAX to write dynamic HTML on the browser.\n* SSR: When web applications use template engines to write dynamic HTML on the server.\n\n# Evaluation Metrics\nWe shall compare both approaches across the following metrics;\n\n* [Search Engine Optimization](#search-engine-optimization)\n* [Link Previews](#link-previews)\n* [Hosting](#hosting)\n* [Scaling](#scaling)\n* [Offline Support](#offline-support)\n* [User Experience](#user-experience)\n* [Performance](#performance)\n\n## Search Engine Optimization (SEO)\nSearch engines use web crawlers to search and index pages of the internet. However, web crawlers support very little if any javascript, therefore SEO is a major challenge for CSR apps. On the other hand, SSR apps are very compatible with web crawlers as the page content is all ready rendered when visited by them.\n\n## Link previews \nLink previews are the image and metadata that appear when a link is shared on a website. This feature is very common on social media platforms. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/2itcxb7ihpntgcplkn24.png)\n\nHowever, just like web crawlers, this feature works by retrieving the static meta-data content of a page. As single-page apps can only have one shared meta-data tags for all views, the same link preview appears regardless of the URL path. \n\nThe entire pages of SSR apps can vary and thus produce unique and relevant link previews for each URL of the app.\n\n## Hosting\nCSR apps are static sites. This means they are comprised of static HTML/CSS/JS files that require no [application server](https://www.reddit.com/r/webdev/comments/9f9qpf/is_nodejs_an_application_server_or_a_web_server/). The following are static site hosting services:\n\n* [Github Pages](https://pages.github.com/)\n* [Render Static Sites](https://render.com/)\n* [Netlify Edge](https://www.netlify.com/products/edge/)\n* [Firebase Hosting](https://firebase.google.com/docs/hosting)\n* [Surge](https://surge.sh/)\n* [Vercel](https://vercel.com/)\n\nAll of which will host your static application for free and for the most part deploys your site on a CDN for high availability.\n\nSSR apps, however, require an application server and thus need to be hosted by what I call 'dynamic site' hosting services ([Cloud VM](https://www.digitalocean.com/products/droplets/), [VPS](https://www.hostinger.com/tutorials/what-is-vps-hosting), [App Hosting](https://cloud.google.com/appengine), [Cloud Functions](https://cloud.google.com/functions)). Some services which host them for free (without credit cards) are as follows:\n\n* [Heroku](https://www.heroku.com/) (App hosting)\n* [Firebase Functions](https://firebase.google.com/docs/functions#:~:text=Cloud%20Functions%20for%20Firebase%20is,runs%20in%20a%20managed%20environment.) (Functions hosting)\n* [Netlify Functions](https://www.netlify.com/products/functions/) (Functions Hosting)\n* [KintoHub](https://www.kintohub.com/) (App hosting)\n* [Always Data](https://www.alwaysdata.com/en/) (App Hosting)\n* [Vercel Functions](https://vercel.com/docs/serverless-functions/introduction) (Functions hosting)\n\n## Scaling\nScalability is a crucial factor when considering CSR and SRR. Static apps can scale near indefinitely for free. This is because static site hosting service would ensure your app's availability. If you are using a hosted database service or API integration they would be responsible for scaling as well. Many APIs or databases are subject to free-tier usage limits and incur charges after they are exceeded.\n\nOn the other hand, when you have to deploy backend code you will need to consider your [system design](https://gist.github.com/vasanthk/485d1c25737e8e72759f) to ensure your app handles high load in production. You may need to consider load balancers and running multiple instances. Services like Heroku can help with this as long as you design your app server to be [stateless](https://whatis.techtarget.com/definition/stateless-app#:~:text=A%20stateless%20app%20is%20an,data%20from%20a%20previous%20session.). \n\nBecause SSR apps require your own app server, scaling is not as straight forward as CSR apps.\n\n\n## Offline Support\nCSR SPAs are very compatible with offline-first experiences via the [Progressive Web Application (PWA)](https://web.dev/progressive-web-apps/) model. While there exist [methods for creating MPA PWA's](https://developers.google.com/web/updates/2018/05/beyond-spa) it is not as straightforward as SPAs. Unless the application is isomorphic, offline functionality is incompatible with SSR because of their strict dependency on the application server.\n\n## User Experience\nCSR apps typically do well on fast \u0026 modern devices and browsers. They are your best bet for an app-like feel and offline support (once built well and ran on modern devices). (Non-Isomorphic) SSR apps depend much less on the capabilities of the device and give a more traditional website experience as the user navigates from one page to another.\n\n## Performance\nCSR SPAs are Javascript intensive therefore, features and performance depend heavily on the browser and the device. DOM manipulation can often be more computationally expensive than requesting a new page from a server. Due to this, SSR apps have a theoretical upper hand when it comes to performance on a wide variation of browsers and devices. That being said, isomorphic strategies and client-side frameworks are always improving to address this issue.\n\n\n# Overall Comparison\nThe figure below summarizes my findings in comparing SSR vs CSR. I further separate it by the SPA/MPA architectures. In an attempt to minimize controversy, I use a simple 3-star scale to indicate the difficulty for a rendering technique to achieve a particular metric. ⭐⭐⭐ (easy), ⭐⭐(normal), ⭐(not so easy)\n\n![table](https://dev-to-uploads.s3.amazonaws.com/i/ehcxucf2sdqugq8f7bx2.png)\n \nNote: \nSSR MPA: Fullstack stack web app (eg. a Django App)\nSSR SPA: Isomorphic frontend app (eg. Next.js) \nCSR MPA: Static sites without a router (eg. a Gatsby site (kinda...))\nCSR SPA: Frontend web app (eg. React App)\n\nThere's some nuance left out of this table so it should be taken with a grain of salt. Different approaches provide different features over others so its not always a one-to-one comparison.\n\n# Conclusion\nWhile the diversity of approaches in web development may be overwhelming at times, we get the advantage of catering to many varied use cases. When deciding on an approach, I think it's a good idea to first clearly define and prioritize your goals then select the approach which best helps you achieve them. Thanks for taking the time to check out this series and if I left anything out or got something wrong please drop a comment below! I'd be happy to amend and give credit.\n\n# Related Discussions\n\n* [DevTo: 🛠✨ Demystifying SSR, CSR, universal and static rendering with animations](https://dev.to/kefranabg/demystifying-ssr-csr-universal-and-static-rendering-with-animations-m7d)\n* [Medium: SSR vs CSR: The ever on-going debate](https://medium.com/@rohit_/ssr-vs-csr-the-ever-on-going-debate-e124021bbdb6)\n* [Medium: The Benefits of Server Side Rendering Over Client Side Rendering](https://medium.com/walmartglobaltech/the-benefits-of-server-side-rendering-over-client-side-rendering-5d07ff2cefe8)\n* [Blog: SSR vs CSR vs Static Render](https://blog.devaman.dev/ssr-vs-csr-vs-static-render-ckb7v4xo101i3lss10xghh7su)\n* [Devto: SSR vs CSR](https://dev.to/alain2020/ssr-vs-csr-2617)\n* [YouTube: The Drawback of CSR](https://www.youtube.com/watch?v=xTsYYxf2Ut0)\n* [YouTube: Tech Talk CSR vs SSR](https://www.youtube.com/watch?v=Y2spCNZDt84)\n* [Twitter: How much faster is SSR?](https://mobile.twitter.com/jaffathecake/status/1354714429355651073)\n* [Google Blog: Rendering on the Web](https://developers.google.com/web/updates/2019/02/rendering-on-the-web)","positive_reactions_count":27,"cover_image":null,"tag_list":["rendering","html","javascript","webdev"],"canonical_url":"https://dev.to/snickdx/understanding-rendering-in-web-apps-csr-vs-ssr-43d","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":572258,"title":"Understanding Rendering in Web Apps: SPA vs MPA","description":"Introduction   Single Page Applications (SPAs) and Multi-Page Applications (MPAs) are archit...","published":true,"published_at":"2021-01-15T05:32:04.067Z","slug":"understanding-rendering-in-web-apps-spa-vs-mpa-49ef","path":"/snickdx/understanding-rendering-in-web-apps-spa-vs-mpa-49ef","url":"https://dev.to/snickdx/understanding-rendering-in-web-apps-spa-vs-mpa-49ef","comments_count":0,"public_reactions_count":2,"page_views_count":603,"published_timestamp":"2021-01-15T05:32:04Z","body_markdown":"# Introduction\n\nSingle Page Applications (SPAs) and Multi-Page Applications (MPAs) are architectural patterns for building web applications.\n\nSPAs are reactive web applications that give a native look and feel without page loads. SPAs owe this to AJAX/Client-Side Rendering typically provided by a client-side framework such as react/vue/angular.\n\nMany in the industry refer to more traditional web applications as Multi-Page Applications (MPAs). Such applications are comprised of multiple webpages that the user navigates between. \n\n# Architecture and Rendering\nWhile many have equated CSR with SPAs and SSR with MPAs, they are treaded as patterns which can be applied in either rendering method.\n\n## SSR MPAs\nServer-Side Rendered Multi-Page Applications are full-stack applications built with server-side frameworks and template engines. These applications are comprised of multiple pages which are rendered on the fly by the server. Content Management systems also fall into this category.\n\nExamples\n* [Django](https://www.djangoproject.com/) (Python)\n* [Express](https://expressjs.com/) (Nodejs)\n* [Laravel](https://laravel.com/) (PHP)\n* [ASP.NET](https://dotnet.microsoft.com/) (C#)\n* [Wordpress](https://wordpress.org/) (PHP)\n* [Drupal](https://www.drupal.org/) (PHP)\n* [Grav](https://getgrav.org/)\n\n## SSR SPAs\nServer-Side Rendered Single-Page Applications are our Isomorphic javascript frameworks. These technologies deliver the first render of a SPA from the server instead of the browser.\n\n## CSR SPA\nClient-Side Rendered Single-Page Applications are any app that is built with a client-side framework with a router. A client-side router is a library which allows users to navigate to different parts of the application without needing to load a new page.\n\n## CSR MPA\nClient-Side Rendered Multi-Page Applications are your regular static sites. These websites are comprised of webpages built with just HTML/CSS/JS and can even be deployed without a web server (think [JAMStack](https://www.educative.io/edpresso/what-is-jamstack?aid=5082902844932096\u0026utm_source=google\u0026utm_medium=cpc\u0026utm_campaign=edpresso-dynamic\u0026gclid=Cj0KCQiA9P__BRC0ARIsAEZ6irhSZtcmhnTvfNMMuf0G2D6NSG378LrSV4-XwfVTphMmFytAJ1GJHCsaAp2xEALw_wcB)). These sites may have some dynamic content brought via javascript and an API, widget or iframe but do not utilize a client-side router. Static Site Generators are tools which help in building out static sites.\n\nSome examples:\n* [Gatsby](https://www.gatsbyjs.com/)\n* [eleventy](https://www.11ty.dev/)\n* [jekyll](https://jekyllrb.com/)\n* NextJS (SSG Feature)\n* NuxtJS (SSG Feature)\n\n# More on web app arhictectures:\n* [MPAs vs SPAs](https://chunkbytes.com/single-page-applications-vs-multi-page-applications/)\n* [App Shell UX](https://web.dev/app-shell-ux-with-service-workers/)\n* [MPA, SPA or Hybrid?](https://medium.com/swlh/spa-mpa-or-a-hybrid-42fdf6b3415c)\n \nNow that we understand the basics of rendering and app architectures, we shall finally look at comparing the approaches in the next and final post of this series.","positive_reactions_count":2,"cover_image":null,"tag_list":[],"canonical_url":"https://dev.to/snickdx/understanding-rendering-in-web-apps-spa-vs-mpa-49ef","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":571949,"title":"Understanding Rendering in Web Apps: CSR","description":"Client-Side Rendering   This category includes approaches that make network calls for data a...","published":true,"published_at":"2021-01-14T21:17:12.351Z","slug":"understanding-rendering-in-web-apps-csr-354d","path":"/snickdx/understanding-rendering-in-web-apps-csr-354d","url":"https://dev.to/snickdx/understanding-rendering-in-web-apps-csr-354d","comments_count":0,"public_reactions_count":8,"page_views_count":283,"published_timestamp":"2021-01-14T21:17:12Z","body_markdown":"## Client-Side Rendering\nThis category includes approaches that make network calls for data and construct HTML all in the browser (AJAX). This is typically done in Single Page Applications ([SPA](https://en.wikipedia.org/wiki/Single-page_application)).\n\n### Vanilla AJAX\nAsynchronous Javascript and XML (AJAX) is a web programming technique whereby the DOM is modified to present data from a network request issued by javascript without refreshing the page.\nThe following code snippet is an example of such.\n\n```javascript\n\u003cdiv id=\"myDiv\"\u003e\u003c/div\u003e\n\n\u003cscript\u003e\n   //async function to use await syntax on promises\n   async function getAndDisplayUser(){\n      const div = document.querySelector('#myDiv');\n      const response = await fetch('https://jsonplaceholder.typicode.com/users/1');\n      const user = await response.json();\n      div.innherHTML = `\u003cp\u003e name: ${user.name} phone: ${user.phone} \u003c/p\u003e`;//data from URL is 'rendered' to the page using JS\n   }\n\n   getAndDisplayUser();\n\u003c/script\u003e\n\n``` \n### AJAX in Client-Side Frameworks\nClient-side frameworks typically support performing network requests whether by APIs provided by the framework, utilizing other libraries or by using the standard fetch function. Combining that with the framework's templating syntax would allow you to perform AJAX.\n\nExamples\n* Angular - [HTTP Client module](https://angular.io/api/common/http/HttpClientModule)\n* Vue - Fetch, [Vue Axios](https://www.npmjs.com/package/vue-axios) \n* React - Fetch, [React Axios](https://www.npmjs.com/package/vue-axios)\n\nThe following is an example of AJAX (CSR) using react axios\n```javascript\n// Post a request for a user with a given ID\nrender() {\n  return (\n    \u003cdiv\u003e\n      \u003cGet url=\"/api/user\" params={{id: \"12345\"}}\u003e\n        {(error, response, isLoading, makeRequest, axios) =\u003e {\n          if(error) {\n            return (\u003cdiv\u003eSomething bad happened: {error.message} \u003cbutton onClick={() =\u003e makeRequest({ params: { reload: true } })}\u003eRetry\u003c/button\u003e\u003c/div\u003e)\n          }\n          else if(isLoading) {\n            return (\u003cdiv\u003eLoading...\u003c/div\u003e)\n          }\n          else if(response !== null) {\n            return (\u003cdiv\u003e{response.data.message} \u003cbutton onClick={() =\u003e makeRequest({ params: { refresh: true } })}\u003eRefresh\u003c/button\u003e\u003c/div\u003e)\n          }\n          return (\u003cdiv\u003eDefault message before request is made.\u003c/div\u003e)\n        }}\n      \u003c/Get\u003e\n    \u003c/div\u003e\n  )\n}\n```\nFrom my research, it appears that AJAX is the only way to do Client Side Rendering so you may see these terms be used interchangeably.\n\nIn the next post, we shall take a look at how these approaches play with the Single Page-Application, Multi-Page Application architectures.","positive_reactions_count":8,"cover_image":null,"tag_list":["html","javascript","webdev","csr"],"canonical_url":"https://dev.to/snickdx/understanding-rendering-in-web-apps-csr-354d","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":571920,"title":"Understanding Rendering in Web Apps: SSR","description":"Server-Side Rendering approaches typically generate markup on every request to the server. They retur...","published":true,"published_at":"2021-01-14T20:39:34.450Z","slug":"understanding-rendering-in-web-apps-ssr-1h83","path":"/snickdx/understanding-rendering-in-web-apps-ssr-1h83","url":"https://dev.to/snickdx/understanding-rendering-in-web-apps-ssr-1h83","comments_count":0,"public_reactions_count":8,"page_views_count":383,"published_timestamp":"2021-01-14T20:39:34Z","body_markdown":"Server-Side Rendering approaches typically generate markup on every request to the server. They return dynamic HTML content 'On the fly'.\n\n# Server-side scripts/languages\nServer-side scripting languages provide syntax that is interpreted by the view engine of an [application server](https://en.wikipedia.org/wiki/Application_server) to dynamically write HTML and send it in an HTTP response.\nExamples:\n\n* Zend Engine - [PHP](https://www.php.net/)\n* .NET - [ASP](https://en.wikipedia.org/wiki/Active_Server_Pages)\n* Java - [JSP](https://en.wikipedia.org/wiki/Jakarta_Server_Pages)\n\nThe following is the example of a PHP script.\n![](https://www.studytonight.com/php/images/first-php-example.png)\n\n## Template Engines\nFor application server runtimes such as; Nodejs, Python, Java, PHP etc. there are libraries called template engines that can provide templating syntax.\n\nExamples:\n\n* Nodejs - [Handlebars](https://handlebarsjs.com/), [Pug](https://pugjs.org/api/getting-started.html)\n* Python - [Jinja](https://jinja.palletsprojects.com/en/2.11.x/)\n* Java - [Thymeleaf](https://www.thymeleaf.org/)\n* PHP - [Smarty](https://www.smarty.net/), [Blade](https://laravel.com/docs/8.x/blade)\n\nThe following is an example of a handlebars template:\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/wq4ep6ew3b2i4n5j5w6j.png)\n\n### Isomorphic/Universal JS\nThese approaches (also called meta-framework) allow you to render the first page of a [client-side framework](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction) app on the server then deliver it to the client. This would allow the browser to show page content without needing to execute any javascript. The page is first only visible but then becomes interactable (or [hydrated](https://en.wikipedia.org/wiki/Hydration_(web_development))) when the client-side framework's javascript has finished loaded on the browser. Isomorphic frameworks run on nodejs on the server. \n\nExamples of these are:\n* Angular - [Angular Universal] (https://angular.io/guide/universal) (Runs on an [express](https://expressjs.com/) app)\n* React - [NextJS](https://nextjs.org/)\n* Vue - [NuxtJS](https://nuxtjs.org/)\n* Svelte/Angular/React - [MeteorJS](https://www.meteor.com/)\n\nIn the next post, we shall look at Client-Side Rendering.","positive_reactions_count":8,"cover_image":null,"tag_list":["ssr","html","javascript","webdev"],"canonical_url":"https://dev.to/snickdx/understanding-rendering-in-web-apps-ssr-1h83","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":571905,"title":"Understanding Rendering in Web Apps: Intro","description":"Introduction   In web apps today, it turns out there are many approaches to delivering (dyna...","published":true,"published_at":"2021-01-14T19:39:44.345Z","slug":"understanding-rendering-in-web-apps-intro-21cl","path":"/snickdx/understanding-rendering-in-web-apps-intro-21cl","url":"https://dev.to/snickdx/understanding-rendering-in-web-apps-intro-21cl","comments_count":0,"public_reactions_count":21,"page_views_count":501,"published_timestamp":"2021-01-14T19:39:44Z","body_markdown":"# Introduction\n\nIn web apps today, it turns out there are many approaches to delivering (dynamic) HTML to the web browser. Maybe you have come across terms such as 'Server-side Rendering', 'Client-side Rendering' or 'Isomorphic Javascript' what does it all mean? What is the benefit of choosing one over the other? In this series, I shall attempt to explain and categorize them.\n\n# First, What do we mean by 'Rendering'🤔\nThe web pages of a dynamic website are automatically constructed based on data in a database rather than being manually written by a developer. This allows the content of the webpage to vary by updating the database instead of rewriting HTML and deploying a new version. \n\n![Dynamic vs Static comparison](https://dev-to-uploads.s3.amazonaws.com/i/xjb0nrdjpny3i92kn3lr.jpg)\n[Image Credit: learnwebskill](https://learnwebskill.com/guide/static-website-dynamic-website)\n\n**Rendering in the context of this series refers to how/when/where template (a preliminary version of markup) and data are combined to create the final markup content of a site.**\n\n![templating visualization](https://image.slidesharecdn.com/htmltemplatingdotjs-141111051016-conversion-gate01/95/html-templating-dot-js-8-638.jpg?cb=1420356450)\n\n[Image Credit: slideshare](https://www.slideshare.net/nsangam/html-templating-dot-js)\n\n# Quick Rant 💬\nIn my opinion, it should be called 'Templating' instead of 'Rendering' because that's what it is. Especially when you consider the browser is actually rendering HTML but hey I don't get to decide these things...\n\n# Types of Rendering\nIn this series, I shall organize the various rendering approaches under two broad categories:\n\n* Server-Side Rendering\n* Client-Side Rendering\n\nAs the name might imply; the main difference of client/server indicates where the templating/rendering/interpolation takes place. Either on the client or on the server.\n\nIn the next post, we shall look at Server-Sider rending approaches.","positive_reactions_count":21,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--hxtbGs7u--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/lhe6ph4bbo202efc7eaz.jpg","tag_list":["rendering","webdev","javascript","html"],"canonical_url":"https://dev.to/snickdx/understanding-rendering-in-web-apps-intro-21cl","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":554601,"title":"Organizing a 200+ mega-collection of dev resources","description":"What I would like to share today is yet another collection of resources. However, I do try to include...","published":true,"published_at":"2020-12-28T14:07:42.860Z","slug":"organizing-a-200-mega-collection-of-dev-resources-4lai","path":"/snickdx/organizing-a-200-mega-collection-of-dev-resources-4lai","url":"https://dev.to/snickdx/organizing-a-200-mega-collection-of-dev-resources-4lai","comments_count":0,"public_reactions_count":7,"page_views_count":105,"published_timestamp":"2020-12-28T14:07:42Z","body_markdown":"What I would like to share today is yet another collection of resources. However, I do try to include the other collections I've seen as well.\n\nThis collection was made on a neat app called [keen](https://staykeen.com) which is somewhat of a Pinterest competitor focusing more on links than pictures. \n\nWhat's good about using keen is the organization, collaboration and discovery features for its content. You can also subscribe to new content notifications. \n\nSo if you are interested in discovering awesome projects, stellar dev talks, learning resources, great developers and articles please consider checking out my [Keen on software development](https://staykeen.com/keen/uHsJwNvBdP1zRNXvF6Be). I'm open to collaborating as well so do DM me if you are interested. Thanks.\n\n","positive_reactions_count":7,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--BHI8AcIr--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/866zfdsn91wc6s6j4cjy.jpg","tag_list":["codenewbie","career","javascript","css"],"canonical_url":"https://dev.to/snickdx/organizing-a-200-mega-collection-of-dev-resources-4lai","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":546487,"title":"7 Freelancing lessons learnt the hard way","description":"In 2015 after getting the hang of some HTML/CSS/JS and Angular JS, I thought I'd try my hand at freel...","published":true,"published_at":"2020-12-18T17:05:47.622Z","slug":"7-freelancing-lessons-learnt-the-hard-way-1dl1","path":"/snickdx/7-freelancing-lessons-learnt-the-hard-way-1dl1","url":"https://dev.to/snickdx/7-freelancing-lessons-learnt-the-hard-way-1dl1","comments_count":1,"public_reactions_count":59,"page_views_count":1599,"published_timestamp":"2020-12-18T17:05:47Z","body_markdown":"In 2015 after getting the hang of some HTML/CSS/JS and Angular JS, I thought I'd try my hand at freelancing. Most of the work was building out templates/wordpress and maybe a single-page app.\n\nHere are some lessons I've learnt... the hard way.\n\n# 7 Freelancing Lessons\n\n1. [Dealing with inexperience](#dealing-with-inexperience)\n2. [Pricing](#pricing)\n3. [Estimation](#estimation)\n4. [Counting Costs](#counting-costs)\n5. [Payments](#payments)\n6. [Code Ownership](#code-ownership)\n7. [Professionalism](#professionalism)\n\n## Dealing with inexperience 👶🏽\nIf you are just starting off just keep in mind there will be many things you will have to probably learn on the job. While some research is acceptable you don’t want people paying you for more hours because of inexperience. It also helps to be transparent with the client that there will be some research and experimentation involved and it will impact the timeline.\n\n## Pricing 💲\nThe typical approach for many newcomers is a time estimate and hourly rate. However, the problem is that it’s hard to do estimation if haven’t done many real projects before. We often forget to factor in time for activities like; design, research, testing, troubleshooting, making changes from feedback and production deployment. \n\n## Estimation ⏳\nAim to be accurate vs precise ie give a range like 8–10 weeks. If you need to give a hard date then it should be the last day of the last week in your estimation which is your ***worst-case scenario***. If the client really needs it sooner for a project that is new to you then the ***job is not for you***. While it may be hard to turn down a job your well being and reputation is important to for landing future opportunities.  \n\nWithin that timeline think about how many hours it’ll take to accomplish the task then multiply by your rate which can start around ~20usd/hr. Now if you think the time required puts the price under what you think is worth your time then you can just charge that amount as a flat fee instead. Your number of estimated hours should fit within the timeline with a gracious amount of breathing room so you are not working 24/7 and can cater for time delays from unforeseen circumstances.\n\n## Counting Costs 🧾\nThink about all resources you require and services you plan to offer. Remember wifi, work conditions, food, developer/tool licences, hosting \u0026 domains all cost money. Are you going to provide support through development? Are you willing to go back and forth with the client for feedback? What days and hours of the day are you making yourself available for that and how will it affect the timeline? After that initial payment and launch, will you go into yearly maintenance and support agreement? Who will pay hosting fees and renew the domain?\n\n## Payments 💵\nAfter figuring out what services you will be offering, it's important to agree with the client how and when payments will be made. This should be done **before any work is done**. Depending on the client you may find out that you are not an eligible vendor. Maybe you need to be a registered business or perhaps you don't support their payment methods or other legal restrictions.\n\nIf you can work with the client, you should decide on a payment schedule. How much should they pay upfront? What's your cancellation or refund policy?   \n\n## Code Ownership 👩🏻‍⚖️\nAdditionally, ensure you agree with the client on who owns the code and/or assets. For applications, you probably want to reuse some code as a template for other projects so the client should be informed of this. Lookup [software license agreement templates](https://www.legalnature.com/guides/the-basics-of-software-license-agreements) to issue licenses for larger scoped projects.\n\n# Professionalism 💼\nIt is important that you value your client's time, don't be late for meetings. Always be courteous and polite. Be reachable and communicate often to manage expectations. Communicate delays, or extensions **early**. Saying yes is a commitment and sometimes saying no takes courage.\n \nUse [invoice generators](https://invoice-generator.com/#/1) to issue invoices to clients and keep track of their payments. Use tools like [trello](https://trello.com) to make a [kanban](https://www.projectmanager.com/kanban) board that breaks up work into tasks for better management. You can also reference these tasks on invoices. Setup a project plan to schedule milestones and when you will meet with the client for gathering requirements, demos and feedback. As you mature, invest in [DevOps](https://www.youtube.com/watch?v=_I94-tJlovg) to build more reliably.\n\n# Conclusion\n\nThis came out much longer than I expected but if I have saved someone from getting burned then it would have been worthwhile. The prospect of freelancing may seem overwhelming but you can definitely start off small and lean on your helpful community for guidance and support. Can you relate to these lessons or have any you'd like to share?","positive_reactions_count":59,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--qzZBJWp4--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/94gsv0ni3xu32ym6gk89.jpg","tag_list":["webdev","career","experience","freelance"],"canonical_url":"https://dev.to/snickdx/7-freelancing-lessons-learnt-the-hard-way-1dl1","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}},{"type_of":"article","id":504259,"title":"Background Events in PWAs","description":"Introductions 👋🏽   Hi, I'm Nicholas Mendez a Caribbean-based Web Developer hailing from the...","published":true,"published_at":"2020-11-02T17:38:51.714Z","slug":"background-events-in-pwas-54i","path":"/snickdx/background-events-in-pwas-54i","url":"https://dev.to/snickdx/background-events-in-pwas-54i","comments_count":0,"public_reactions_count":6,"page_views_count":242,"published_timestamp":"2020-11-02T17:38:51Z","body_markdown":"# Introductions 👋🏽\nHi, I'm Nicholas Mendez a Caribbean-based Web Developer hailing from the country of Trinidad and Tobago :trinidad_tobago:. I am a die-hard advocate for web apps and as such, I am always on the lookout for new cutting-edge capabilities making their way to the platform. These APIs can seem daunting to many so it is my hope that I can break it down with examples and explanations. \n\n# Background Events 🎉\nIn the traditional web model, anything that happens on the app is usually initiated by the user or client. \n\nFor example: When you request a page on a movie app; it may fetch movie data from the server. You can add a refresh button so it can retrieve any updates since the page load.\n\nHowever, the service worker technology of [Progressive Web Applications](https://web.dev/what-are-pwas/) can be used to perform background operations even when the app isn't open or even online (°ロ°)!\n\nThis is useful if you want to trigger a time-based event in the background such as:\n\n* Updating an offline cache\n* Pushing new state from the server to the app\n* Triggering a reminder notification\n\n**Note** This article will not provide complete code examples but instead highlight the main API calls, you can refer to the references below for an in-depth look.\n\n# Methodologies 💡\nCurrently, there are three ways (AFAIK) in which you can achieve this.\n\n## Push Notifications\nPush notifications allow you to send push messages from the server to one or many clients. [Firebase Cloud Messaging (FCM)](https://firebase.google.com/docs/cloud-messaging) is a free service you can use to deliver push messages to devices. These messages appear as push notifications on the device (once permission has been granted beforehand). View a [demo](https://www.webpushnotifications.com/html5-browser-push-notifications-example-demo). Notifications can also be configured to be silent data-messages so your app can receive data from the server without alerting the user.\n\n\n```javascript\n//using fcm in sw.js (service worker)\n//note: these URLs only resolve if app is hosted on firebase\n//use cdn URLs if app is hosted elsewhere\nimportScripts('/__/firebase/7.12.0/firebase-app.js');\nimportScripts('/__/firebase/7.12.0/firebase-messaging.js');\nimportScripts('/__/firebase/init.js');\n\nconst messaging = firebase.messaging();\n\nmessaging.setBackgroundMessageHandler(function(payload) {\n  console.log('[firebase-messaging-sw.js] Received background message ', payload);\n  // Customize notification here\n  // do other data fetching here too\n  const notificationTitle = 'Background Message Title';\n  const notificationOptions = {\n    body: 'Background Message body.',\n    icon: './assets/img/192.png'\n  };\n  //if we want to alert the user else omit\n  return self.registration.showNotification(notificationTitle, notificationOptions);\n});\n\n```\n\n## Periodic Background Sync\nThis method is useful when you want to implement a best-effort approach to fetching data when the client isn't always guaranteed to have a network connection. The API allows you to configure the ServiceWorker to schedule some work at a time interval such as showing notifications or retrieving data from the server every 24 hours. \n\nIf you want to schedule a one-off event you can configure the service worker to unregister the periodic sync after it triggers for the first time.\n\n```javascript\n//request permission and register periodicSync in ./main.js\n// Check if service workers are supported\nif ('serviceWorker' in navigator) {\n  const registration = await navigator.serviceWorker.ready;\n  // Check if periodicSync is supported\n  if ('periodicSync' in registration) {\n    // Request permission\n    const status = await navigator.permissions.query({\n      name: 'periodic-background-sync',\n    });\n    if (status.state === 'granted') {\n      try {\n        // Register new sync every 24 hours\n        await registration.periodicSync.register('news', {\n          minInterval: 24 * 60 * 60 * 1000, // 1 day\n        });\n        console.log('Periodic background sync registered!');\n      } catch(e) {\n        console.error(`Periodic background sync failed:\\n${e}`);\n      }\n    }\n  }\n}\n```\n\nThen in the service worker:\n\n```javascript\n//setup handler in sw.js\nself.addEventListener('periodicsync', (event) =\u003e {\n  if (event.tag === 'news') {\n    console.log('Fetching news in the background!');\n    event.waitUntil(fetchAndCacheNews());\n    //for one off event\n    registration.periodicSync.unregister('periodicsync');\n  }\n});\n```\n## Notification Trigger\nIf you wish to schedule a local notification from the device even while offline, notification triggers are your best bet. Instead of being received as a push message from the server, you can have your app flash a 'local' notification message even if there is no internet connection. This can be useful for reminders and alarms that do not require new data from the server. You just need to provide a timestamp to the notification API and the message will alert the user when that time arrives.\n\n```javascript\nconst createScheduledNotification = async (tag, title, timestamp) =\u003e {\n  const registration = await navigator.serviceWorker.getRegistration();\n  registration.showNotification(title, {\n    tag: tag,\n    body: \"This notification was scheduled 30 seconds ago\",\n    showTrigger: new TimestampTrigger(timestamp + 30 * 1000)\n  });\n};\n```\nI have a full demo of Notification Triggers available on [Repl.it](https://repl.it/@Snickdx/notification-trigger#index.html)\n\n# Wrapping Up 🎁\nThanks for taking the time to read this long post. If there's anything I left out or mistaken please sound off the comments below!\n\n# References 📚\nCode snippets for Periodic Sync and Notification Triggers are cited form here:\n\n[web.dev: Periodic Background Sync](https://web.dev/periodic-background-sync/)\n[web.dev: Notification Triggers](https://web.dev/notification-triggers/)\n[Google Developers: Push Notifications](https://developers.google.com/web/ilt/pwa/introduction-to-push-notifications)","positive_reactions_count":6,"cover_image":null,"tag_list":["pwa","notifications","webdev","serviceworker"],"canonical_url":"https://dev.to/snickdx/background-events-in-pwas-54i","user":{"name":"Nicholas Mendez","username":"snickdx","twitter_username":"snickdx","github_username":"Snickdx","website_url":"https://nicholasmendez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fwOiU46z--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiGH21ZI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304653/d0e52f0e-c7ea-4cfe-ac87-d6755560c44b.jpg"}}]